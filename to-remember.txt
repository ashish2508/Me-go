1.
Go code generally runs faster than interpreted languages and compiles faster than other compiled languages like C and rust
2.
Go build gives .exe executable files
3.
Go is strongly typed and static typed
4.
Data types

bool, string

int, int8, int16, int32, int64

uint, uint8, uint16, uint32, uint64 uintptr

byte (alias for unint8)

rune (alias for int32) (represents a Unicode point)

float32, float64

complex64, complex128  (used to represent imaginary number)

FORMAT SPECIFIERS
| Go Data Type | Description                                  | Format Specifier | Example               |
|--------------|----------------------------------------------|------------------|-----------------------|
| int          | Signed integer types (int, int8, etc.)       | %d               | fmt.Printf("%d", 10)  |
| float        | Floating-point types (float32, float64)      | %f               | fmt.Printf("%f", 3.14)|
| bool         | Boolean (true or false)                      | %t               | fmt.Printf("%t", true)|

| string       | String                                       | %s               | fmt.Printf("%s", "hello")|
| byte         | Alias for uint8                              | %c               | fmt.Printf("%c", 'A') |
| rune         | Alias for int32                              | %c or %U         | fmt.Printf("%c", 'ðŸ˜Š') |
| complex      | Complex numbers (complex64, complex128)      | %f (parts) or %v | fmt.Printf("%v", 1+2i)|
| slice        | Slices                                       | %v               | fmt.Printf("%v", []int{1, 2})|
| array        | Arrays                                       | %v               | fmt.Printf("%v", [3]int{1, 2, 3})|
| map          | Maps                                         | %v               | fmt.Printf("%v", map[string]int{"a": 1})|
| struct       | Structs                                      | %v or %+v or %#v | fmt.Printf("%v", myStruct)|
| pointer      | Pointers                                     | %p               | fmt.Printf("%p", &myVar)|
_______________________________________________________________________________________________________________________________

5.


